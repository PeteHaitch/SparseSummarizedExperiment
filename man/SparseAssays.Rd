% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/SparseAssays-class.R
\docType{class}
\name{SparseAssays-class}
\alias{NROW,SparseAssays-method}
\alias{SparseAssays}
\alias{SparseAssays-class}
\alias{[,SparseAssays,ANY-method}
\alias{[<-,SparseAssays,ANY,ANY,ANY-method}
\alias{[[<-,SparseAssays,ANY,ANY-method}
\alias{as}
\alias{cbind,SparseAssays-method}
\alias{combine,SparseAssays,SparseAssays-method}
\alias{dim,SparseAssays-method}
\alias{rbind,SparseAssays-method}
\title{SparseAssays objects}
\usage{
SparseAssays(sparse_assays = SimpleList())

\S4method{[[}{SparseAssays,ANY,ANY}(x, i, j, ...) <- value

\S4method{dim}{SparseAssays}(x)

\S4method{NROW}{SparseAssays}(x)

\S4method{[}{SparseAssays,ANY}(x, i, j, ..., drop = FALSE)

\S4method{[}{SparseAssays,ANY,ANY,ANY}(x, i, j, ...) <- value

\S4method{rbind}{SparseAssays}(..., deparse.level = 1)

\S4method{cbind}{SparseAssays}(..., deparse.level = 1)

\S4method{combine}{SparseAssays,SparseAssays}(x, y, ...)
}
\description{
SparseAssays objects

SparseAssays
}
\examples{
sa <- SparseAssays(sparse_assays =
                     SimpleList(a1 =
                                  SimpleList(
                                    s1 = SimpleList(map =
                                                      as.integer(c(NA, 1, NA, NA, 2, NA, 3, NA, 4, 5)),
                                                    data =
                                                      matrix(1:10, ncol = 2)),
                                    s2 = SimpleList(map =
                                                      as.integer(c(NA, NA, 1, 2, NA, NA, 3, 4, NA, NA)),
                                                    data =
                                                      matrix(8:1, ncol = 2))),
                                a2 =
                                  SimpleList(
                                    s1 = SimpleList(map =
                                                      as.integer(c(NA, 1, NA, 2, 2, NA, 1, NA, NA, 1)),
                                                    data = matrix(1:2, ncol = 1)),
                                    s2 = SimpleList(map =
                                                      as.integer(c(1, 1, 1, 2, NA, NA, NA, NA, NA, NA)),
                                                    data = matrix(4:3, ncol = 1)))

                     )
)


value <- SparseAssays(sparse_assays =
                        SimpleList(a1 =
                                     SimpleList(
                                       s1 = SimpleList(map =
                                                         as.integer(c(NA, 1, NA, 2, 3)),
                                                       data =
                                                         matrix(c(3, 14, 15, 8, 19, 20), ncol = 2)),
                                       s2 = SimpleList(map =
                                                         as.integer(c(NA, 1, 2, NA, NA)),
                                                       data =
                                                         matrix(c(6, 15, 2, 11), ncol = 2))),
                                   a2 =
                                     SimpleList(
                                       s1 = SimpleList(map =
                                                         as.integer(c(NA, 1, NA, NA, 1)),
                                                       data = matrix(11, ncol = 1)),
                                       s2 = SimpleList(map =
                                                         as.integer(c(NA, NA, NA, NA, NA)),
                                                       data = matrix(, ncol = 1)))

                        )
)
sa_ <- sa
# Seems to work
sa[1, ] <- value[5, ]

# Seems to work
sa <- sa_
sa[1, 1] <- value[5, 1]

# Rightfully fails validObject(val)
sa <- sa_
\dontrun{sa[, 1] <- value[, 1]}

# Fails but not for obvious reason
\dontrun{sa[1, 1] <- value[5, 1:2]}

# Seems to work (basically does an rbind)
sa[11, ] <- value[1, ]

# Rightfully fails validObject(val)
\dontrun{sa[11, 1] <- value[1, 1]}
sa <- SparseAssays(sparse_assays =
                     SimpleList(a1 =
                                  SimpleList(
                                    s1 = SimpleList(map =
                                                      as.integer(c(NA, 1, NA, NA, 2, NA, 3, NA, 4, 5)),
                                                    data =
                                                      matrix(1:10, ncol = 2)),
                                    s2 = SimpleList(map =
                                                      as.integer(c(NA, NA, 1, 2, NA, NA, 3, 4, NA, NA)),
                                                    data =
                                                      matrix(8:1, ncol = 2))),
                                a2 =
                                  SimpleList(
                                    s1 = SimpleList(map =
                                                      as.integer(c(NA, 1, NA, 2, 2, NA, 1, NA, NA, 1)),
                                                    data = matrix(1:2, ncol = 1)),
                                    s2 = SimpleList(map =
                                                      as.integer(c(1, 1, 1, 2, NA, NA, NA, NA, NA, NA)),
                                                    data = matrix(4:3, ncol = 1)))

                     )
)
rse <- SummarizedExperiment(rowRanges = GRanges('chr1', IRanges(1:10, 2:11)),
                            colData = DataFrame(row.names = c("s1", "s2")))
rsse <- SparseSummarizedExperiment(sparseAssays = sa,
                                   rowRanges = rowRanges(rse),
                                   colData = colData(rse))
names(rsse) <- LETTERS[10:1]
.expand <- SparseSummarizedExperiment:::.expand
identical(.expand(rbind(sparseAssays(rsse[1:5, ]), sparseAssays(rsse[6:10, ]))),
          .expand(sparseAssays(rsse)))
identical(.expand(rbind(sparseAssays(rsse[1:5, ]), sparseAssays(rsse[6:10, ]))),
          .expand(combine(sparseAssays(rsse[1:5, ]), sparseAssays(rsse[6:10, ]))))

identical(.expand(cbind(sparseAssays(rsse[, 1]), sparseAssays(rsse[, 2]))),
          .expand(sparseAssays(rsse)))
identical(.expand(cbind(sparseAssays(rsse[, 1]), sparseAssays(rsse[, 2]))),
          .expand(combine(sparseAssays(rsse[, 1]), sparseAssays(rsse[, 2]))))

identical(.expand(combine(sparseAssays(rsse[1:7, ]), sparseAssays(rsse[2:10, ]))),
          .expand(sparseAssays(rsse)))

identical(.expand(combine(sparseAssays(rsse[1:7, ]), sparseAssays(rsse[10:7, ]))),
          .expand(sparseAssays(rsse[c(1:7, 10:8)])))
}

